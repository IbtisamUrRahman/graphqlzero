webpackHotUpdate("static/development/pages/index.js",{

/***/ "./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_corejs2_core_js_json_stringify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime-corejs2/core-js/json/stringify */ "./node_modules/@babel/runtime-corejs2/core-js/json/stringify.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_json_stringify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs2_core_js_json_stringify__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/slicedToArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral */ "./node_modules/@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/extends */ "./node_modules/@babel/runtime-corejs2/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/classCallCheck */ "./node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/createClass */ "./node_modules/@babel/runtime-corejs2/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/possibleConstructorReturn */ "./node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/getPrototypeOf */ "./node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/inherits */ "./node_modules/@babel/runtime-corejs2/helpers/esm/inherits.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! styled-jsx/style */ "./node_modules/styled-jsx/style.js");
/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _apollo_react_hooks__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @apollo/react-hooks */ "./node_modules/@apollo/react-hooks/lib/react-hooks.esm.js");
/* harmony import */ var apollo_boost__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! apollo-boost */ "./node_modules/apollo-boost/lib/bundle.esm.js");
/* harmony import */ var isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! isomorphic-unfetch */ "./node_modules/isomorphic-unfetch/browser.js");
/* harmony import */ var isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! prismjs */ "./node_modules/prismjs/prism.js");
/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(prismjs__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _lib_example_query__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../lib/example-query */ "./lib/example-query.ts");









var _jsxFileName = "/home/ealmansi/dev/ealmansi/subocean-tiger/apps/subocean-tiger-web/pages/index.tsx";

var __jsx = react__WEBPACK_IMPORTED_MODULE_14___default.a.createElement;

function _templateObject2() {
  var data = Object(_babel_runtime_corejs2_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_2__["default"])(["", ""]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = Object(_babel_runtime_corejs2_helpers_esm_taggedTemplateLiteral__WEBPACK_IMPORTED_MODULE_2__["default"])(["", ""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}







var Index = withApolloClient(function Index() {
  return __jsx("div", {
    className: "jsx-1020753893",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 11
    },
    __self: this
  }, __jsx(TopBar, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 12
    },
    __self: this
  }), __jsx(Header, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 13
    },
    __self: this
  }), __jsx(Main, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 14
    },
    __self: this
  }), __jsx(Footer, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15
    },
    __self: this
  }), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
    id: "1020753893",
    __self: this
  }, "*{font-family:'Raleway',sans-serif;}html,body{margin:0;padding:0;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/ealmansi/dev/ealmansi/subocean-tiger/apps/subocean-tiger-web/pages/index.tsx */"));
});

function withApolloClient(Component) {
  var uri = 'http://localhost:4000';
  var client = new apollo_boost__WEBPACK_IMPORTED_MODULE_11__["default"]({
    uri: uri,
    fetch: isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_12___default.a
  });
  return (
    /*#__PURE__*/
    function (_React$Component) {
      Object(_babel_runtime_corejs2_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_8__["default"])(_class, _React$Component);

      function _class() {
        Object(_babel_runtime_corejs2_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__["default"])(this, _class);

        return Object(_babel_runtime_corejs2_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__["default"])(this, Object(_babel_runtime_corejs2_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__["default"])(_class).apply(this, arguments));
      }

      Object(_babel_runtime_corejs2_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_5__["default"])(_class, [{
        key: "render",
        value: function render() {
          return __jsx(_apollo_react_hooks__WEBPACK_IMPORTED_MODULE_10__["ApolloProvider"], {
            client: client,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 36
            },
            __self: this
          }, __jsx(Component, Object(_babel_runtime_corejs2_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_3__["default"])({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 37
            },
            __self: this
          })));
        }
      }]);

      return _class;
    }(react__WEBPACK_IMPORTED_MODULE_14___default.a.Component)
  );
}

function TopBar() {
  return __jsx("nav", {
    className: "jsx-606098915",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 46
    },
    __self: this
  }, __jsx("a", {
    href: "#",
    className: "jsx-606098915" + " " + "brand",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 47
    },
    __self: this
  }, "SuboceanTiger"), __jsx("ul", {
    className: "jsx-606098915",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 48
    },
    __self: this
  }, __jsx("li", {
    className: "jsx-606098915",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 49
    },
    __self: this
  }, __jsx("a", {
    href: "#examples",
    className: "jsx-606098915",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 50
    },
    __self: this
  }, "Examples")), __jsx("li", {
    className: "jsx-606098915",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 52
    },
    __self: this
  }, __jsx("a", {
    href: "#get-started",
    className: "jsx-606098915",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 53
    },
    __self: this
  }, "Get Started")), __jsx("li", {
    className: "jsx-606098915",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 55
    },
    __self: this
  }, __jsx("a", {
    href: "https://github.com/ealmansi",
    target: "_blank",
    rel: "noopener",
    className: "jsx-606098915",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 56
    },
    __self: this
  }, "Github"))), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
    id: "606098915",
    __self: this
  }, "nav.jsx-606098915{padding:20px 10px;border-bottom:1px solid lightgray;overflow:auto;}a.jsx-606098915{padding:20px 10px;-webkit-text-decoration:none;text-decoration:none;color:black;}a.jsx-606098915:hover{-webkit-text-decoration:underline;text-decoration:underline;}@media screen and (max-width:480px){nav.jsx-606098915 .brand.jsx-606098915{display:none;}}nav.jsx-606098915 ul.jsx-606098915{display:inline-block;float:right;margin:0;padding:0;list-style:none;}nav.jsx-606098915 ul.jsx-606098915 li.jsx-606098915{display:inline-block;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/ealmansi/dev/ealmansi/subocean-tiger/apps/subocean-tiger-web/pages/index.tsx */"));
}

function Header() {
  return __jsx("header", {
    className: "jsx-536573995",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 95
    },
    __self: this
  }, __jsx("h1", {
    className: "jsx-536573995",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 96
    },
    __self: this
  }, "SuboceanTiger"), __jsx("p", {
    className: "jsx-536573995",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 97
    },
    __self: this
  }, "Fake Online GraphQL API for Testing and Prototyping"), __jsx("p", {
    className: "jsx-536573995",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 98
    },
    __self: this
  }, "Powered by JSONPlaceholder"), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
    id: "536573995",
    __self: this
  }, "header.jsx-536573995{padding:50px;border-bottom:1px solid lightgray;text-align:center;}header.jsx-536573995 h1.jsx-536573995{font-size:64px;}@media screen and (max-width:768px){header.jsx-536573995 h1.jsx-536573995{font-size:8vw;}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/ealmansi/dev/ealmansi/subocean-tiger/apps/subocean-tiger-web/pages/index.tsx */"));
}

function Main() {
  return __jsx("main", {
    className: "jsx-2078761130",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 120
    },
    __self: this
  }, __jsx("div", {
    className: "jsx-2078761130",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 121
    },
    __self: this
  }, __jsx(Intro, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 122
    },
    __self: this
  }), __jsx(Examples, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 123
    },
    __self: this
  }), __jsx(GetStarted, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 124
    },
    __self: this
  }), __jsx(Resources, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 125
    },
    __self: this
  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
    id: "2078761130",
    __self: this
  }, "main.jsx-2078761130{padding:30px;border-bottom:1px solid lightgray;}main.jsx-2078761130 div.jsx-2078761130{max-width:768px;margin:0 auto;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/ealmansi/dev/ealmansi/subocean-tiger/apps/subocean-tiger-web/pages/index.tsx */"));
}

function Intro() {
  return __jsx("section", {
    id: "intro",
    className: "jsx-3728986921",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 143
    },
    __self: this
  }, __jsx("h1", {
    className: "jsx-3728986921",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 144
    },
    __self: this
  }, "Intro"), __jsx("p", {
    className: "jsx-3728986921",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 145
    },
    __self: this
  }, "SuboceanTiger is a free online GraphQL API that you can use whenever you need some fake data."), __jsx("p", {
    className: "jsx-3728986921",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 148
    },
    __self: this
  }, "It's great for tutorials, testing new libraries, sharing code examples, ..."), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
    id: "3728986921",
    __self: this
  }, "section.jsx-3728986921{margin-bottom:20px;padding-top:20px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/ealmansi/dev/ealmansi/subocean-tiger/apps/subocean-tiger-web/pages/index.tsx */"));
}

function Examples() {
  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_14__["useState"])('get-post'),
      activeQuery = _useState[0],
      setActiveQuery = _useState[1];

  var exampleQueries = Object(_lib_example_query__WEBPACK_IMPORTED_MODULE_15__["getExampleQueries"])();
  var exampleQuery = exampleQueries.find(function (_ref) {
    var id = _ref.id;
    return id === activeQuery;
  }) || exampleQueries[0];

  function buildClassName(id) {
    return id === activeQuery ? 'active' : '';
  }

  function buildOnClickHandler(id) {
    return function (event) {
      setActiveQuery(id);
    };
  }

  return __jsx("section", {
    id: "examples",
    className: "jsx-3335675009" + " " + "examples",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 174
    },
    __self: this
  }, __jsx("h1", {
    className: "jsx-3335675009",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 175
    },
    __self: this
  }, "Examples"), __jsx("p", {
    className: "jsx-3335675009",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 176
    },
    __self: this
  }, "Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus."), __jsx("div", {
    className: "jsx-3335675009" + " " + "columns",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 177
    },
    __self: this
  }, __jsx("div", {
    className: "jsx-3335675009" + " " + "column left-column",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 178
    },
    __self: this
  }, __jsx("ul", {
    className: "jsx-3335675009",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 179
    },
    __self: this
  }, exampleQueries.map(function (exampleQuery) {
    var id = exampleQuery.id,
        label = exampleQuery.label;
    return __jsx("li", {
      key: id,
      className: "jsx-3335675009" + " " + (buildClassName(id) || ""),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 184
      },
      __self: this
    }, __jsx("a", {
      href: "#example-query",
      onClick: buildOnClickHandler(id),
      className: "jsx-3335675009",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 185
      },
      __self: this
    }, label));
  }))), __jsx("div", {
    className: "jsx-3335675009" + " " + "column right-column",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 192
    },
    __self: this
  }, __jsx("section", {
    id: "example-query",
    className: "jsx-3335675009",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 193
    },
    __self: this
  }, __jsx("h1", {
    className: "jsx-3335675009",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 194
    },
    __self: this
  }, "Query or Mutation"), __jsx(QueryDisplay, {
    exampleQuery: exampleQuery,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 195
    },
    __self: this
  })), __jsx("section", {
    className: "jsx-3335675009",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 197
    },
    __self: this
  }, __jsx("h1", {
    className: "jsx-3335675009",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 198
    },
    __self: this
  }, "Response"), __jsx(ResponseDisplay, {
    exampleQuery: exampleQuery,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 199
    },
    __self: this
  })))), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
    id: "3335675009",
    __self: this
  }, ".examples.jsx-3335675009{margin-bottom:20px;padding-top:20px;}.examples.jsx-3335675009 .columns.jsx-3335675009{margin-top:50px;padding:0 20px 20px 20px;border:1px solid lightgray;}.examples.jsx-3335675009 .columns.jsx-3335675009 .column.jsx-3335675009{vertical-align:top;margin:0;padding:0;display:inline-block;}@media screen and (max-width:667px){.examples.jsx-3335675009 .columns.jsx-3335675009 .column.jsx-3335675009{display:block;}}.examples.jsx-3335675009 .columns.jsx-3335675009 .left-column.jsx-3335675009{width:30%;}@media screen and (max-width:667px){.examples.jsx-3335675009 .columns.jsx-3335675009 .left-column.jsx-3335675009{width:100%;}}.examples.jsx-3335675009 .columns.jsx-3335675009 .left-column.jsx-3335675009 ul.jsx-3335675009{margin:0;padding:30px 0 10px 0;list-style:none;}.examples.jsx-3335675009 .columns.jsx-3335675009 .left-column.jsx-3335675009 ul.jsx-3335675009 li.jsx-3335675009 a.jsx-3335675009{width:calc(100% - 20px);padding:10px;display:inline-block;color:black;-webkit-text-decoration:none;text-decoration:none;border-bottom:1px solid lightgray;}.examples.jsx-3335675009 .columns.jsx-3335675009 .left-column.jsx-3335675009 ul.jsx-3335675009 li.active.jsx-3335675009 a.jsx-3335675009{background:lightgray;}.examples.jsx-3335675009 .columns.jsx-3335675009 .left-column.jsx-3335675009 ul.jsx-3335675009 li.jsx-3335675009:hover a.jsx-3335675009{background:lightgray;}.examples.jsx-3335675009 .columns.jsx-3335675009 .right-column.jsx-3335675009{width:70%;}@media screen and (max-width:667px){.examples.jsx-3335675009 .columns.jsx-3335675009 .right-column.jsx-3335675009{width:100%;}}.examples.jsx-3335675009 .columns.jsx-3335675009 .right-column.jsx-3335675009 section.jsx-3335675009{padding-top:20px;padding-left:20px;}@media screen and (max-width:667px){.examples.jsx-3335675009 .columns.jsx-3335675009 .right-column.jsx-3335675009 section.jsx-3335675009{padding-left:0;}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/ealmansi/dev/ealmansi/subocean-tiger/apps/subocean-tiger-web/pages/index.tsx */"));
}

function QueryDisplay(props) {
  Object(react__WEBPACK_IMPORTED_MODULE_14__["useEffect"])(function () {
    return prismjs__WEBPACK_IMPORTED_MODULE_13___default.a.highlightAll();
  });
  var exampleQuery = props.exampleQuery;
  var query = exampleQuery.query;
  return __jsx("pre", {
    className: "jsx-873608238",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 278
    },
    __self: this
  }, __jsx("code", {
    className: "jsx-873608238" + " " + "language-graphql",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 279
    },
    __self: this
  }, query), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
    id: "873608238",
    __self: this
  }, "pre.jsx-873608238{min-height:100px;max-height:300px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/ealmansi/dev/ealmansi/subocean-tiger/apps/subocean-tiger-web/pages/index.tsx */"));
}

function ResponseDisplay(props) {
  Object(react__WEBPACK_IMPORTED_MODULE_14__["useEffect"])(function () {
    return prismjs__WEBPACK_IMPORTED_MODULE_13___default.a.highlightAll();
  });
  var exampleQuery = props.exampleQuery;
  var type = exampleQuery.type,
      query = exampleQuery.query;
  var loading, error, data;

  if (type === 'query') {
    var queryResult = Object(_apollo_react_hooks__WEBPACK_IMPORTED_MODULE_10__["useQuery"])(Object(apollo_boost__WEBPACK_IMPORTED_MODULE_11__["gql"])(_templateObject(), query));
    loading = queryResult.loading;
    error = queryResult.error;
    data = queryResult.data;
  } else {
    var _useMutation = Object(_apollo_react_hooks__WEBPACK_IMPORTED_MODULE_10__["useMutation"])(Object(apollo_boost__WEBPACK_IMPORTED_MODULE_11__["gql"])(_templateObject2(), query), {}),
        _useMutation2 = Object(_babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__["default"])(_useMutation, 2),
        _ = _useMutation2[0],
        mutationResult = _useMutation2[1];

    loading = mutationResult.loading;
    error = mutationResult.error;
    data = mutationResult.data;
  }

  var code = null;

  if (error !== undefined) {
    code = __jsx("code", {
      className: "language-textfile",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 305
      },
      __self: this
    }, "Oops. Something went wrong.");
  } else {
    if (loading) {
      code = __jsx("code", {
        className: "language-textfile",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 309
        },
        __self: this
      }, "Loading ...");
    } else {
      var omitTypename = function omitTypename(key, value) {
        if (key === '__typename') {
          return undefined;
        }

        return value;
      };

      var dataDisplay = _babel_runtime_corejs2_core_js_json_stringify__WEBPACK_IMPORTED_MODULE_0___default()(data, omitTypename, 2);

      code = __jsx("code", {
        className: "language-json",
        __source: {
          fileName: _jsxFileName,
          lineNumber: 319
        },
        __self: this
      }, dataDisplay);
    }
  }

  return __jsx("pre", {
    className: "jsx-873608238",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 323
    },
    __self: this
  }, code, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
    id: "873608238",
    __self: this
  }, "pre.jsx-873608238{min-height:100px;max-height:300px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/ealmansi/dev/ealmansi/subocean-tiger/apps/subocean-tiger-web/pages/index.tsx */"));
}

function GetStarted() {
  return __jsx("section", {
    id: "get-started",
    className: "jsx-3728986921",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 337
    },
    __self: this
  }, __jsx("h1", {
    className: "jsx-3728986921",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 338
    },
    __self: this
  }, "Get Started"), __jsx("p", {
    className: "jsx-3728986921",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 339
    },
    __self: this
  }, "Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae."), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
    id: "3728986921",
    __self: this
  }, "section.jsx-3728986921{margin-bottom:20px;padding-top:20px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/ealmansi/dev/ealmansi/subocean-tiger/apps/subocean-tiger-web/pages/index.tsx */"));
}

function Resources() {
  return __jsx("section", {
    id: "resources",
    className: "jsx-3728986921",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 352
    },
    __self: this
  }, __jsx("h1", {
    className: "jsx-3728986921",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 353
    },
    __self: this
  }, "Resources"), __jsx("p", {
    className: "jsx-3728986921",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 354
    },
    __self: this
  }, "Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem."), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
    id: "3728986921",
    __self: this
  }, "section.jsx-3728986921{margin-bottom:20px;padding-top:20px;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/ealmansi/dev/ealmansi/subocean-tiger/apps/subocean-tiger-web/pages/index.tsx */"));
}

function Footer() {
  return __jsx("footer", {
    className: "jsx-3879476674",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 367
    },
    __self: this
  }, __jsx("p", {
    className: "jsx-3879476674",
    __source: {
      fileName: _jsxFileName,
      lineNumber: 368
    },
    __self: this
  }, "Source code and CHANGELOG available on GitHub."), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_9___default.a, {
    id: "3879476674",
    __self: this
  }, "footer.jsx-3879476674{padding:50px;text-align:center;}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n/*@ sourceURL=/home/ealmansi/dev/ealmansi/subocean-tiger/apps/subocean-tiger-web/pages/index.tsx */"));
}

/* harmony default export */ __webpack_exports__["default"] = (Index);

/***/ })

})
//# sourceMappingURL=index.js.05b6f87b20b3c4c8e24f.hot-update.js.map